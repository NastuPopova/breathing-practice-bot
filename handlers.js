// –§–∞–π–ª: handlers.js
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

const { products, messageTemplates } = require('./data');
const { mainKeyboard, logWithTime, validators } = require('./utils');
const { Markup } = require('telegraf');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
async function handleStart(ctx) {
  try {
    const userId = ctx.from.id;
    const firstName = ctx.from.first_name || '–¥—Ä—É–≥';
    
    console.log(`[START] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    await ctx.reply(
      `üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${firstName}!\n\n–Ø –±–æ—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –ü–æ–ø–æ–≤–æ–π, –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º. –ß–µ—Ä–µ–∑ –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫—É—Ä—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      {
        reply_markup: {
          ...mainKeyboard().reply_markup,
          remove_keyboard: true
        }
      }
    );

    const { bot, ADMIN_ID } = global.botData;
    
    if (userId !== parseInt(ADMIN_ID)) {
      bot.telegram.sendMessage(
        ADMIN_ID,
        `üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n- –ò–º—è: ${firstName} ${ctx.from.last_name || ''}\n- Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n- ID: ${userId}`
      ).catch(e => console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: ${e.message}`));
    }
    
    logWithTime(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}, ${ctx.from.username || '–±–µ–∑ username'}`);
  } catch (error) {
    console.error(`[ERROR] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: ${error.message}`);
    console.error(`[ERROR] –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
async function handleBuyAction(ctx) {
  console.log('=========== –ù–ê–ß–ê–õ–û handleBuyAction ===========');
  console.log('–ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç ctx:', JSON.stringify(ctx, null, 2));
  
  try {
    const productId = ctx.match[1];
    console.log(`[BUY] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –≤—ã–±—Ä–∞–ª –ø—Ä–æ–¥—É–∫—Ç —Å ID: ${productId}`);
    console.log('[BUY] –ü–æ–ª–Ω—ã–π match –æ–±—ä–µ–∫—Ç:', JSON.stringify(ctx.match, null, 2));
    
    const product = products[productId];
    
    if (!product) {
      console.log(`[BUY] –ü—Ä–æ–¥—É–∫—Ç —Å ID ${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      await ctx.reply('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.', {
        reply_markup: {
          ...mainKeyboard().reply_markup,
          remove_keyboard: true
        }
      });
      return await ctx.answerCbQuery();
    }

    console.log(`[BUY] –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: ${product.name}`);
    
    const description = product.fullDescription || product.productInfo;
    const confirmCallbackData = `confirm_buy_${productId}`;
    
    console.log(`[BUY] –°–æ–∑–¥–∞–Ω callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: ${confirmCallbackData}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const inlineKeyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', confirmCallbackData)],
      [Markup.button.callback('üí≥ –ü—Ä—è–º–∞—è –∫–Ω–æ–ø–∫–∞ (starter)', `confirm_buy_starter`)],
      [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'show_products')]
    ]);
    
    console.log('[BUY] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞');
    
    await ctx.reply(
      description,
      { 
        parse_mode: 'HTML',
        reply_markup: inlineKeyboard.reply_markup
      }
    );
    
    await ctx.answerCbQuery('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ');
    
    logWithTime(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç: ${product.name}`);
  } catch (error) {
    console.error(`[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–∞: ${error.message}`);
    console.error(`[ERROR] –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
    
    try {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
        reply_markup: {
          ...mainKeyboard().reply_markup,
          remove_keyboard: true
        }
      });
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    } catch (replyError) {
      console.error(`[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${replyError.message}`);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏
async function handleConfirmBuy(ctx) {
  console.log('=========== –ù–ê–ß–ê–õ–û handleConfirmBuy ===========');
  console.log('–ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç ctx:', JSON.stringify(ctx, null, 2));
  console.log('–¢–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', ctx.updateType);
  console.log('Callback query:', JSON.stringify(ctx.callbackQuery, null, 2));
  
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ callback data
    const actionParts = ctx.callbackQuery.data.split('_');
    const productId = actionParts[2]; // ['confirm', 'buy', 'starter']
    
    console.log('[CONFIRM_BUY] –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π callback:', actionParts);
    console.log('[CONFIRM_BUY] ID –ø—Ä–æ–¥—É–∫—Ç–∞:', productId);
    console.log('[CONFIRM_BUY] –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', Object.keys(products));
    
    const product = products[productId];
    console.log('[CONFIRM_BUY] –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç:', product ? product.name : '–ù–µ –Ω–∞–π–¥–µ–Ω');
    
    if (!product) {
      console.log('[CONFIRM_BUY] ‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.editMessageText(
      messageTemplates.emailRequest(product.name),
      { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'show_products' }]
          ]
        }
      }
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    const userId = ctx.from.id;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Object.keys(global.botData.pendingOrders)
      .filter(key => global.botData.pendingOrders[key].userId === userId)
      .forEach(key => delete global.botData.pendingOrders[key]);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    global.botData.pendingOrders[userId] = {
      userId,
      productId,
      status: 'waiting_email',
      timestamp: new Date().toISOString()
    };
    
    console.log('[CONFIRM_BUY] –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', 
      JSON.stringify(global.botData.pendingOrders[userId], null, 2)
    );
    
    await ctx.answerCbQuery('‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞');
    
    logWithTime(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: ${product.name}`);
  } catch (error) {
    console.error('[CONFIRM_BUY] –ü–û–õ–ù–ê–Ø –û–®–ò–ë–ö–ê:', error);
    console.error('[CONFIRM_BUY] –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    
    try {
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
        reply_markup: {
          ...mainKeyboard().reply_markup,
          remove_keyboard: true
        }
      });
    } catch (secondaryError) {
      console.error('[CONFIRM_BUY] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', secondaryError);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
async function handleTextInput(ctx) {
  try {
    const userId = ctx.from.id;
    const text = ctx.message.text;
    const { pendingOrders } = global.botData;
    
    console.log(`[TEXT] –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: "${text}"`);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (!pendingOrders[userId]) {
      console.log(`[TEXT] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞`);
      
      // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start, –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º - –æ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
      if (text === '/start') return;
      
      await ctx.reply(
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
        {
          reply_markup: {
            ...mainKeyboard().reply_markup,
            remove_keyboard: true
          }
        }
      );
      return;
    }
    
    console.log(`[TEXT] –ù–∞–π–¥–µ–Ω –æ–∂–∏–¥–∞—é—â–∏–π –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Å—Ç–∞—Ç—É—Å: ${pendingOrders[userId].status}`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ email
    if (pendingOrders[userId].status === 'waiting_email') {
      console.log(`[TEXT] –û–±—Ä–∞–±–æ—Ç–∫–∞ email –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      if (!validators.email(text)) {
        console.log(`[TEXT] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email: ${text}`);
        return await ctx.reply(messageTemplates.emailInvalid);
      }
      
      pendingOrders[userId].email = text;
      pendingOrders[userId].status = 'waiting_phone';
      
      await ctx.reply(messageTemplates.phoneRequest);
      
      logWithTime(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–≤–µ–ª email: ${text}`);
    } 
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    else if (pendingOrders[userId].status === 'waiting_phone') {
      console.log(`[TEXT] –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      const cleanedPhone = text.replace(/\s+/g, '');
      
      if (!validators.phone(cleanedPhone)) {
        console.log(`[TEXT] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${cleanedPhone}`);
        return await ctx.reply(messageTemplates.phoneInvalid);
      }
      
      pendingOrders[userId].phone = cleanedPhone;
      pendingOrders[userId].status = 'waiting_payment';
      
      const product = products[pendingOrders[userId].productId];
      
      await ctx.reply(
        messageTemplates.orderReady(product.name, product.price),
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            ...mainKeyboard().reply_markup,
            remove_keyboard: true
          }
        }
      );
      
      logWithTime(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–≤–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω: ${cleanedPhone}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      try {
        const { notifyAdmin } = require('./admin');
        await notifyAdmin(userId);
      } catch (adminError) {
        console.error(`[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${adminError.message}`);
      }
    }
  } catch (error) {
    console.error(`[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
    console.error(`[ERROR] –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`);
    
    await ctx.reply(
      messageTemplates.errorMessage, 
      {
        reply_markup: {
          ...mainKeyboard().reply_markup,
          remove_keyboard: true
        }
      }
    );
  }
}

module.exports = {
  handleStart,
  handleBuyAction,
  handleConfirmBuy,
  handleTextInput
};
