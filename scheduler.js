// –§–∞–π–ª: scheduler.js
// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è Railway

const { logWithTime } = require('./utils');

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 * @param {String} adminId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param {Boolean} optimizedMode - –§–ª–∞–≥ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
 */
function setupScheduler(bot, adminId, optimizedMode = false) {
  // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
  logWithTime(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ ${optimizedMode ? '–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º' : '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º'} —Ä–µ–∂–∏–º–µ`);
  
  // –ú–∞—Å—Å–∏–≤ —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const counters = {
    pingCount: 0,
    telegramApiCalls: 0,
    lastActivity: new Date(),
    consecutiveApiErrors: 0,
    restartAttempts: 0,
    memoryUsageHistory: []
  };
  
  // –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  const intervals = {
    connectionCheck: optimizedMode ? 30 * 60 * 1000 : 15 * 60 * 1000, // 30 –∏–ª–∏ 15 –º–∏–Ω—É—Ç
    statusReport: optimizedMode ? 8 * 60 * 60 * 1000 : 4 * 60 * 60 * 1000, // 8 –∏–ª–∏ 4 —á–∞—Å–∞
    artificialActivity: optimizedMode ? 20 * 60 * 1000 : 10 * 60 * 1000, // 20 –∏–ª–∏ 10 –º–∏–Ω—É—Ç
    memoryMonitoring: 60 * 60 * 1000 // 1 —á–∞—Å (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∂–∏–º–∞)
  };
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –ø–∞–º—è—Ç–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
  const logMemoryUsage = () => {
    const memUsage = process.memoryUsage();
    const memoryInfo = {
      timestamp: new Date(),
      rss: Math.round(memUsage.rss / 1024 / 1024),
      heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024),
      heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024),
      external: Math.round(memUsage.external / 1024 / 1024)
    };
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–æ 24 –∑–∞–ø–∏—Å–µ–π (24 —á–∞—Å–∞ –ø—Ä–∏ —á–∞—Å–æ–≤–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ)
    if (counters.memoryUsageHistory.length >= 24) {
      counters.memoryUsageHistory.shift();
    }
    
    counters.memoryUsageHistory.push(memoryInfo);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ - –µ—Å–ª–∏ —Ä–æ—Å—Ç –±–æ–ª–µ–µ 20% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞
    if (counters.memoryUsageHistory.length >= 4) {
      const oldestEntry = counters.memoryUsageHistory[counters.memoryUsageHistory.length - 4];
      const latestEntry = counters.memoryUsageHistory[counters.memoryUsageHistory.length - 1];
      
      const memoryGrowthPercent = ((latestEntry.heapUsed - oldestEntry.heapUsed) / oldestEntry.heapUsed) * 100;
      
      if (memoryGrowthPercent > 20) {
        logWithTime(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏: ${memoryGrowthPercent.toFixed(2)}% –∑–∞ 3 —á–∞—Å–∞`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —É—Ç–µ—á–∫–µ –ø–∞–º—è—Ç–∏
        try {
          bot.telegram.sendMessage(
            adminId,
            `‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–∞–º—è—Ç–∏*\n\n–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–æ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –Ω–∞ ${memoryGrowthPercent.toFixed(2)}% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞.\n\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\nHeap: ${latestEntry.heapUsed} MB\nTotal: ${latestEntry.rss} MB`,
            { parse_mode: 'Markdown' }
          );
        } catch (error) {
          logWithTime(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–∞–º—è—Ç–∏: ${error.message}`);
        }
      }
    }
    
    logWithTime(`üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏: RSS: ${memoryInfo.rss} MB, Heap Used: ${memoryInfo.heapUsed} MB`);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
  const checkConnection = () => {
    return new Promise((resolve, reject) => {
      bot.telegram.getMe()
        .then(botInfo => {
          counters.telegramApiCalls++;
          counters.consecutiveApiErrors = 0;
          
          // –í –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —É—Å–ø–µ—à–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
          if (!optimizedMode || counters.telegramApiCalls % 3 === 0) {
            logWithTime(`‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API –∞–∫—Ç–∏–≤–Ω–æ (–±–æ—Ç: ${botInfo.username})`);
          }
          
          resolve(true);
        })
        .catch(error => {
          counters.consecutiveApiErrors++;
          logWithTime(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API: ${error.message}`);
          reject(error);
        });
    });
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º—è–≥–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
  const performMemoryCleanup = () => {
    try {
      const beforeCleanup = process.memoryUsage().heapUsed / 1024 / 1024;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (global.gc) {
        global.gc();
        const afterCleanup = process.memoryUsage().heapUsed / 1024 / 1024;
        const freed = beforeCleanup - afterCleanup;
        
        if (freed > 1) { // –ï—Å–ª–∏ –æ—Å–≤–æ–±–æ–¥–∏–ª–∏ –±–æ–ª—å—à–µ 1 –ú–ë
          logWithTime(`üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ ${freed.toFixed(2)} MB`);
        }
      }
    } catch (error) {
      logWithTime(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–º—è—Ç–∏: ${error.message}`);
    }
  };
  
  // 1. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API Telegram —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  const connectionCheckInterval = setInterval(async () => {
    try {
      await checkConnection();
      
      // –ï—Å–ª–∏ –ø–æ–¥—Ä—è–¥ –±–æ–ª–µ–µ 3 –æ—à–∏–±–æ–∫ - –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
      if (counters.consecutiveApiErrors >= 3) {
        logWithTime('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–±–æ–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API');
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        counters.restartAttempts++;
        
        try {
          // –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
          bot.stop('connection_error');
          await new Promise(resolve => setTimeout(resolve, 5000));
          bot.launch();
          
          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          bot.telegram.sendMessage(
            adminId, 
            `‚ùóÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram API. –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (#${counters.restartAttempts}).`
          );
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
          counters.consecutiveApiErrors = 0;
        } catch (restartError) {
          logWithTime(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: ${restartError.message}`);
        }
      }
      
      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –º—è–≥–∫—É—é –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏
      if (counters.telegramApiCalls % 3 === 0) {
        performMemoryCleanup();
      }
    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      logWithTime(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
    }
  }, intervals.connectionCheck);
  
  // 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
  const statusReportInterval = setInterval(() => {
    const now = new Date();
    const hours = now.getHours();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (—Å 9 –¥–æ 21)
    if (hours >= 9 && hours < 21) {
      const uptimeSeconds = Math.floor((now - global.botData.startTime) / 1000);
      const memoryUsage = process.memoryUsage();
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
      const formatUptime = (seconds) => {
        const days = Math.floor(seconds / (3600 * 24));
        seconds -= days * 3600 * 24;
        const hours = Math.floor(seconds / 3600);
        seconds -= hours * 3600;
        const minutes = Math.floor(seconds / 60);
        seconds -= minutes * 60;
        seconds = Math.floor(seconds);
        
        let result = '';
        if (days > 0) result += `${days}–¥ `;
        if (hours > 0) result += `${hours}—á `;
        if (minutes > 0) result += `${minutes}–º `;
        result += `${seconds}—Å`;
        
        return result;
      };
      
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const message = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞*
${optimizedMode ? 'üîã –†–µ–∂–∏–º: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π' : '‚ö° –†–µ–∂–∏–º: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'}

‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${formatUptime(uptimeSeconds)}
üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–Ω–≥–æ–≤: ${counters.pingCount}
üì° –í—ã–∑–æ–≤—ã API Telegram: ${counters.telegramApiCalls}
üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${counters.lastActivity.toLocaleString()}

üíæ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏*:
‚Ä¢ RSS: ${Math.round(memoryUsage.rss / 1024 / 1024)} –ú–ë
‚Ä¢ Heap Total: ${Math.round(memoryUsage.heapTotal / 1024 / 1024)} –ú–ë
‚Ä¢ Heap Used: ${Math.round(memoryUsage.heapUsed / 1024 / 1024)} –ú–ë

üîÅ –ü–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: ${counters.restartAttempts}
‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ API: ${counters.consecutiveApiErrors}
`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      bot.telegram.sendMessage(adminId, message, { parse_mode: 'Markdown' })
        .then(() => {
          logWithTime('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
        })
        .catch(error => {
          logWithTime(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
        });
    }
  }, intervals.statusReport);
  
  // 3. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
  const artificialActivityInterval = setInterval(() => {
    counters.pingCount++;
    counters.lastActivity = new Date();
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π 5-–π –ø–∏–Ω–≥ –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    if (!optimizedMode || counters.pingCount % 5 === 0) {
      logWithTime(`–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞ (#${counters.pingCount})`);
    }
  }, intervals.artificialActivity);
  
  // 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
  const memoryMonitoringInterval = setInterval(() => {
    logMemoryUsage();
  }, intervals.memoryMonitoring);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
  bot.use((ctx, next) => {
    counters.lastActivity = new Date();
    return next();
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  process.on('SIGINT', () => {
    clearInterval(connectionCheckInterval);
    clearInterval(statusReportInterval);
    clearInterval(artificialActivityInterval);
    clearInterval(memoryMonitoringInterval);
    logWithTime('–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  });
  
  process.on('SIGTERM', () => {
    clearInterval(connectionCheckInterval);
    clearInterval(statusReportInterval);
    clearInterval(artificialActivityInterval);
    clearInterval(memoryMonitoringInterval);
    logWithTime('–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ SIGTERM');
  });
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
  logMemoryUsage();
  
  logWithTime(`–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ ${optimizedMode ? '–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º' : '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º'} —Ä–µ–∂–∏–º–µ`);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö
  return {
    intervals,
    stop: () => {
      clearInterval(connectionCheckInterval);
      clearInterval(statusReportInterval);
      clearInterval(artificialActivityInterval);
      clearInterval(memoryMonitoringInterval);
      logWithTime('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  };
}

module.exports = { setupScheduler };
