// –§–∞–π–ª: scheduler.js
// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–Ω–∞ –±–æ—Ç–∞ –Ω–∞ Render

const { logWithTime } = require('./utils');

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
 * @param {Object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 * @param {String} adminId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
function setupScheduler(bot, adminId) {
  // –ú–∞—Å—Å–∏–≤ —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const counters = {
    pingCount: 0,
    telegramApiCalls: 0,
    lastActivity: new Date(),
    consecutiveApiErrors: 0
  };
  
  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API
  const checkConnection = () => {
    return new Promise((resolve, reject) => {
      bot.telegram.getMe()
        .then(botInfo => {
          counters.telegramApiCalls++;
          counters.consecutiveApiErrors = 0;
          logWithTime(`‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API –∞–∫—Ç–∏–≤–Ω–æ (–±–æ—Ç: ${botInfo.username})`);
          resolve(true);
        })
        .catch(error => {
          counters.consecutiveApiErrors++;
          logWithTime(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API: ${error.message}`);
          reject(error);
        });
    });
  };
  
  // 1. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API Telegram —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  const connectionCheckInterval = setInterval(async () => {
    try {
      await checkConnection();
      
      // –ï—Å–ª–∏ –ø–æ–¥—Ä—è–¥ –±–æ–ª–µ–µ 3 –æ—à–∏–±–æ–∫ - –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
      if (counters.consecutiveApiErrors >= 3) {
        logWithTime('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–±–æ–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API');
        
        try {
          // –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
          bot.stop('connection_error');
          await new Promise(resolve => setTimeout(resolve, 5000));
          bot.launch();
          
          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          bot.telegram.sendMessage(
            adminId, 
            '‚ùóÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram API. –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.'
          );
        } catch (restartError) {
          logWithTime(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: ${restartError.message}`);
        }
      }
    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      logWithTime(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
    }
  }, 15 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
  
  // 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
  const statusReportInterval = setInterval(() => {
    const now = new Date();
    const hours = now.getHours();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (—Å 9 –¥–æ 21)
    if (hours >= 9 && hours < 21) {
      const uptime = Math.floor((now - counters.lastActivity) / 1000 / 60);
      const message = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞*

‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${formatUptime(process.uptime())}
üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–Ω–≥–æ–≤: ${counters.pingCount}
üì° –í—ã–∑–æ–≤—ã API Telegram: ${counters.telegramApiCalls}
üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${counters.lastActivity.toLocaleString()}

üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${Math.round(process.memoryUsage().rss / 1024 / 1024)} –ú–ë
`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      bot.telegram.sendMessage(adminId, message, { parse_mode: 'Markdown' })
        .then(() => {
          logWithTime('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
        })
        .catch(error => {
          logWithTime(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
        });
    }
  }, 4 * 60 * 60 * 1000);
  
  // 3. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
  const artificialActivityInterval = setInterval(() => {
    counters.pingCount++;
    counters.lastActivity = new Date();
    logWithTime(`–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞ (#${counters.pingCount})`);
  }, 10 * 60 * 1000);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
  bot.use((ctx, next) => {
    counters.lastActivity = new Date();
    return next();
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  process.on('SIGINT', () => {
    clearInterval(connectionCheckInterval);
    clearInterval(statusReportInterval);
    clearInterval(artificialActivityInterval);
    logWithTime('–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  });
  
  logWithTime('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
 * @param {Number} seconds - –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {String} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
 */
function formatUptime(seconds) {
  const days = Math.floor(seconds / (3600 * 24));
  seconds -= days * 3600 * 24;
  const hours = Math.floor(seconds / 3600);
  seconds -= hours * 3600;
  const minutes = Math.floor(seconds / 60);
  seconds -= minutes * 60;
  seconds = Math.floor(seconds);
  
  let result = '';
  if (days > 0) result += `${days}–¥ `;
  if (hours > 0) result += `${hours}—á `;
  if (minutes > 0) result += `${minutes}–º `;
  result += `${seconds}—Å`;
  
  return result;
}

module.exports = { setupScheduler };
