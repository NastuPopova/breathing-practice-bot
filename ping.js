// –§–∞–π–ª: ping.js
// –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–∏–Ω–≥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫

const fetch = require('node-fetch');
const { logWithTime } = require('./utils');

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–º–æ-–ø–∏–Ω–≥–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
 * @param {string} url - URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–∏–Ω–≥–∞
 * @param {number} interval - –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∏–Ω–≥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
 * @param {number} maxRetries - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
function setupPing(url, interval = 30, maxRetries = 3) {
  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ URL –∏–º–µ–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª
  const baseUrl = url.startsWith('http') ? url : `https://${url}`;
  const pingUrl = `${baseUrl}/ping`;
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
  const intervalMs = interval * 60 * 1000;
  
  // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  let successCount = 0;
  let failureCount = 0;
  let consecutiveFailures = 0;
  let isBackoff = false;
  let currentBackoffInterval = intervalMs;
  let lastSuccessTime = null;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
  const getBackoffInterval = (failCount) => {
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    // –ù–æ –Ω–µ –±–æ–ª–µ–µ —á–µ–º –≤ 5 —Ä–∞–∑ –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    const factor = Math.min(Math.pow(1.5, failCount), 5);
    return Math.floor(intervalMs * factor);
  };
  
  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∏–Ω–≥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const ping = async () => {
    try {
      // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–∏–Ω–≥, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —à—É–º –≤ –ª–æ–≥–∞—Ö
      if (successCount % 5 === 0 || isBackoff) {
        logWithTime(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∏–Ω–≥: ${pingUrl} (–ø–æ–ø—ã—Ç–∫–∞ #${successCount + failureCount + 1})`);
      }
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è fetch
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      
      const response = await fetch(pingUrl, {
        method: 'GET',
        signal: controller.signal,
        headers: {
          'User-Agent': 'Breathing Practice Bot Monitoring Service',
          'Cache-Control': 'no-cache, no-store'
        },
        // –í–∞–∂–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫ URL, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        // –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
        redirect: 'follow'
      });
      
      clearTimeout(timeoutId);
      
      if (response.ok) {
        successCount++;
        consecutiveFailures = 0;
        lastSuccessTime = new Date();
        
        // –ï—Å–ª–∏ –º—ã –±—ã–ª–∏ –≤ —Ä–µ–∂–∏–º–µ backoff, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
        if (isBackoff) {
          isBackoff = false;
          currentBackoffInterval = intervalMs;
          logWithTime(`‚úÖ –ü–∏–Ω–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É ${interval} –º–∏–Ω—É—Ç`);
        } else if (successCount % 10 === 0) {
          // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–π 10-–π —É—Å–ø–µ—à–Ω—ã–π –ø–∏–Ω–≥ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
          logWithTime(`‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω, —É—Å–ø–µ—à–Ω—ã—Ö –ø–∏–Ω–≥–æ–≤: ${successCount}, –æ—à–∏–±–æ–∫: ${failureCount}`);
        }
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ HTTP: ${response.status}`);
      }
    } catch (error) {
      failureCount++;
      consecutiveFailures++;
      
      const errorMessage = error.name === 'AbortError' 
        ? '–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (10 —Å–µ–∫—É–Ω–¥)'
        : error.message;
      
      logWithTime(`‚ùå –û–®–ò–ë–ö–ê –ü–ò–ù–ì–ê #${failureCount}: ${errorMessage}`);
      
      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –±–æ–ª—å—à–µ maxRetries, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
      if (consecutiveFailures >= maxRetries && !isBackoff) {
        isBackoff = true;
        currentBackoffInterval = getBackoffInterval(consecutiveFailures);
        
        logWithTime(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –æ—à–∏–±–∫–∏ –ø–∏–Ω–≥–∞ (${consecutiveFailures}). –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ ${Math.floor(currentBackoffInterval/60000)} –º–∏–Ω—É—Ç`);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —É–≤–µ–¥–æ–º–ª—è–µ–º –µ–≥–æ –æ–± –æ—à–∏–±–∫–µ
        try {
          const { bot, ADMIN_ID } = global.botData;
          if (bot && ADMIN_ID) {
            bot.telegram.sendMessage(
              ADMIN_ID,
              `‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–ø–∏–Ω–≥–æ–≤–∞—Ç—å ${pingUrl}\n\n–ü—Ä–æ–∏–∑–æ—à–ª–æ ${consecutiveFailures} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–∏–Ω–≥–∞.\n\n–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${errorMessage}`
            ).catch(e => console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–∏–Ω–≥–∞:', e.message));
          }
        } catch (notifyError) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        }
      }
    } finally {
      // –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–∏–Ω–≥ —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ backoff –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
      setTimeout(ping, isBackoff ? currentBackoffInterval : intervalMs);
    }
  };
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–∏–Ω–≥ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
  const initialDelay = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  logWithTime(`üîÑ –ù–∞—Å—Ç—Ä–æ–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è ${pingUrl} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${interval} –º–∏–Ω—É—Ç (–ø–µ—Ä–≤—ã–π –ø–∏–Ω–≥ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç)`);
  
  setTimeout(() => {
    ping();
  }, initialDelay);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏–Ω–≥–æ–º –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  return {
    getStats: () => ({
      successCount,
      failureCount,
      consecutiveFailures,
      isBackoff,
      currentInterval: isBackoff ? Math.floor(currentBackoffInterval/60000) : interval,
      lastSuccessTime
    }),
    stop: () => {
      logWithTime('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      // –ù–µ –º–æ–∂–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å setTimeout, –Ω–æ –º–æ–∂–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥
      return { stopped: true };
    }
  };
}

module.exports = { setupPing };
