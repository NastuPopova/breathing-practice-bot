// –§–∞–π–ª: bot_handlers.js
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è Railway

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const { 
  app, 
  bot, 
  PORT, 
  APP_URL, 
  ADMIN_ID, 
  pendingOrders, 
  completedOrders,
  startTime,
  setupWebhook,
  logWithTime,
  formatUptime
} = require('./config');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
const { products, messageTemplates } = require('./data');
const { mainKeyboard, consultationsKeyboard, removeKeyboard } = require('./utils');
const { handleTextInput } = require('./handlers');
const { confirmPayment, sendConsultationRecording } = require('./admin');
const { setupPing } = require('./ping');
const { setupScheduler } = require('./scheduler');

// –§–ª–∞–≥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è Railway
const RAILWAY_OPTIMIZED_MODE = true;

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
bot.action('show_info', async (ctx) => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø —Å –ø–æ–¥–ø–∏—Å—å—é
    await ctx.replyWithPhoto(
      { source: 'files/logo.jpg' },
      { caption: 'üå¨Ô∏è –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –ü–æ–ø–æ–≤–æ–π - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö' }
    );
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    await ctx.reply(
      `‚ÑπÔ∏è *–û –∫—É—Ä—Å–∞—Ö –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫*\n\n*–ê–Ω–∞—Å—Ç–∞—Å–∏—è –ü–æ–ø–æ–≤–∞* - —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º.\n\n–ù–∞—à–∏ –∫—É—Ä—Å—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º:\n\n‚Ä¢ –ü–æ–≤—ã—Å–∏—Ç—å –∂–∏–∑–Ω–µ–Ω–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é\n‚Ä¢ –°–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞\n‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞\n‚Ä¢ –ü–æ–≤—ã—Å–∏—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç\n‚Ä¢ –£–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ "üõí –ö—É–ø–∏—Ç—å –∫—É—Ä—Å" –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏.`,
      { 
        parse_mode: 'Markdown',
        reply_markup: {
          ...mainKeyboard().reply_markup,
          remove_keyboard: true
        }
      }
    );
    
    await ctx.answerCbQuery();
    logWithTime(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é`);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": ${error.message}`);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
bot.action('show_purchases', async (ctx) => {
  // –ö–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)...
});

// ... –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ Express

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è Railway
app.get('/', (req, res) => {
  const uptime = Math.floor((new Date() - startTime) / 1000);
  const uptimeFormatted = formatUptime(uptime);
  const memoryUsage = process.memoryUsage();
  
  res.send(`
    <html>
      <head>
        <title>Breathing Practice Bot - Railway Edition</title>
        <style>
          body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; }
          .status { padding: 10px; border-radius: 5px; margin-bottom: 10px; }
          .online { background-color: #d4edda; color: #155724; }
          .railway { background-color: #e3f2fd; color: #0d47a1; }
          h1 { color: #5682a3; }
          .info { background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 15px; }
          .memory { background-color: #fff3cd; padding: 15px; border-radius: 5px; }
        </style>
      </head>
      <body>
        <h1>Breathing Practice Bot</h1>
        <div class="status online">
          <strong>Status:</strong> Bot is running on Railway!
        </div>
        <div class="status railway">
          <strong>Mode:</strong> Railway Optimized (${RAILWAY_OPTIMIZED_MODE ? 'Enabled' : 'Disabled'})
        </div>
        <div class="info">
          <p><strong>Uptime:</strong> ${uptimeFormatted}</p>
          <p><strong>Started:</strong> ${startTime.toLocaleString()}</p>
          <p><strong>Last ping:</strong> ${new Date().toLocaleString()}</p>
          <p><strong>Port:</strong> ${PORT}</p>
          <p><strong>Webhook URL:</strong> ${APP_URL}</p>
        </div>
        <div class="memory">
          <p><strong>Memory Usage:</strong></p>
          <p>RSS: ${Math.round(memoryUsage.rss / 1024 / 1024)} MB</p>
          <p>Heap Total: ${Math.round(memoryUsage.heapTotal / 1024 / 1024)} MB</p>
          <p>Heap Used: ${Math.round(memoryUsage.heapUsed / 1024 / 1024)} MB</p>
        </div>
      </body>
    </html>
  `);
  logWithTime(`–ó–∞–ø—Ä–æ—Å –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (uptime: ${uptimeFormatted})`);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è (–≤–∞–∂–Ω–æ –¥–ª—è Railway)
app.get('/ping', (req, res) => {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å HTTP –∫–æ–¥–æ–º 200
    res.status(200).set('Content-Type', 'text/plain').send('pong');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    global.botData.lastPingTime = new Date();
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ping-–∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.status(200).send('error, but still alive');
  }
});

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è Railway
app.get('/status', (req, res) => {
  try {
    const uptimeSeconds = Math.floor((new Date() - startTime) / 1000);
    const status = {
      status: 'ok',
      railway_optimized: RAILWAY_OPTIMIZED_MODE,
      uptime: uptimeSeconds,
      uptime_formatted: formatUptime(uptimeSeconds),
      startTime: startTime.toISOString(),
      currentTime: new Date().toISOString(),
      webhookMode: true,
      webhookUrl: APP_URL,
      port: PORT,
      platform: 'Railway',
      lastPingTime: global.botData.lastPingTime.toISOString(),
      memory: process.memoryUsage(),
      memory_mb: {
        rss: Math.round(process.memoryUsage().rss / 1024 / 1024),
        heapTotal: Math.round(process.memoryUsage().heapTotal / 1024 / 1024),
        heapUsed: Math.round(process.memoryUsage().heapUsed / 1024 / 1024)
      },
      environment: {
        node_version: process.version,
        platform: process.platform,
        arch: process.arch
      }
    };
    
    res.json(status);
    logWithTime('–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞');
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ status-–∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    res.status(200).json({ status: 'error', message: error.message });
  }
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ –¥–ª—è Railway
async function startApp() {
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä
    console.log(`–ó–∞–ø—É—Å–∫ Express —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}...`);
    const server = app.listen(PORT, '0.0.0.0', () => {
      console.log(`Server running on port ${PORT}`);
      logWithTime(`Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT} –∏ –∞–¥—Ä–µ—Å–µ 0.0.0.0`);
    });
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    let webhookSetup = false;
    let attempts = 0;
    const maxAttempts = 5;
    
    while (!webhookSetup && attempts < maxAttempts) {
      attempts++;
      try {
        logWithTime(`–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞ ${attempts}/${maxAttempts}`);
        webhookSetup = await setupWebhook();
        
        if (webhookSetup) {
          logWithTime(`–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å ${attempts} –ø–æ–ø—ã—Ç–∫–∏`);
        } else {
          logWithTime(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–±—Ö—É–∫ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})`);
          // –ï—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∂–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
          await new Promise(resolve => setTimeout(resolve, 5000));
        }
      } catch (error) {
        logWithTime(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ–±—Ö—É–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}): ${error.message}`);
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }
    
    if (webhookSetup) {
      logWithTime('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –¥–ª—è Railway
      if (APP_URL) {
        const pingInterval = RAILWAY_OPTIMIZED_MODE ? 30 : 15; // 30 –º–∏–Ω—É—Ç –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        setupPing(APP_URL, pingInterval);
        logWithTime(`–ù–∞—Å—Ç—Ä–æ–µ–Ω —Å–∞–º–æ–ø–∏–Ω–≥ –¥–ª—è ${APP_URL} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${pingInterval} –º–∏–Ω—É—Ç`);
      }
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ –¥–ª—è Railway
      setupScheduler(bot, ADMIN_ID, RAILWAY_OPTIMIZED_MODE);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∑–∞–ø—É—Å–∫–µ
      if (ADMIN_ID) {
        try {
          const botInfo = await bot.telegram.getMe();
          const memoryInfo = `–ü–∞–º—è—Ç—å: ${Math.round(process.memoryUsage().rss / 1024 / 1024)} MB`;
          
          bot.telegram.sendMessage(
            ADMIN_ID,
            `ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!\n\n–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}\n–ò–º—è –±–æ—Ç–∞: @${botInfo.username}\nID –±–æ—Ç–∞: ${botInfo.id}\nURL: ${APP_URL}\nPORT: ${PORT}\n–†–µ–∂–∏–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${RAILWAY_OPTIMIZED_MODE ? '–í–∫–ª—é—á–µ–Ω ‚úÖ' : '–í—ã–∫–ª—é—á–µ–Ω ‚ùå'}\n${memoryInfo}`
          ).catch(e => console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', e.message));
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error.message);
        }
      }
    } else {
      logWithTime('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–±—Ö—É–∫ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–±—Ö—É–∫ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    logWithTime(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${error.message}`);
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
process.once('SIGINT', () => {
  logWithTime('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  const memoryInfo = `–ü–∞–º—è—Ç—å –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: ${Math.round(process.memoryUsage().rss / 1024 / 1024)} MB`;
  logWithTime(memoryInfo);
  
  bot.telegram.deleteWebhook().then(() => {
    logWithTime('–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω');
  });
  logWithTime('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ SIGINT');
});

process.once('SIGTERM', () => {
  logWithTime('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  const memoryInfo = `–ü–∞–º—è—Ç—å –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: ${Math.round(process.memoryUsage().rss / 1024 / 1024)} MB`;
  logWithTime(memoryInfo);
  
  bot.telegram.deleteWebhook().then(() => {
    logWithTime('–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω');
  });
  logWithTime('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ SIGTERM');
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
startApp();
