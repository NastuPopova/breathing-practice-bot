// –§–∞–π–ª: bot_handlers.js
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const { 
  app, 
  bot, 
  PORT, 
  APP_URL, 
  ADMIN_ID, 
  pendingOrders, 
  completedOrders,
  startTime,
  setupWebhook,
  logWithTime,
  formatUptime
} = require('./config');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
const { products, messageTemplates } = require('./data');
const { mainKeyboard, consultationsKeyboard, removeKeyboard } = require('./utils');
const { handleTextInput } = require('./handlers');
const { confirmPayment, sendConsultationRecording } = require('./admin');
const { setupPing } = require('./ping');
const { setupScheduler } = require('./scheduler');

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
bot.action('show_info', async (ctx) => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø —Å –ø–æ–¥–ø–∏—Å—å—é
    await ctx.replyWithPhoto(
      { source: 'files/logo.jpg' },
      { caption: 'üå¨Ô∏è –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –ü–æ–ø–æ–≤–æ–π - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö' }
    );
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    await ctx.reply(
      `‚ÑπÔ∏è *–û –∫—É—Ä—Å–∞—Ö –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫*\n\n*–ê–Ω–∞—Å—Ç–∞—Å–∏—è –ü–æ–ø–æ–≤–∞* - —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º.\n\n–ù–∞—à–∏ –∫—É—Ä—Å—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º:\n\n‚Ä¢ –ü–æ–≤—ã—Å–∏—Ç—å –∂–∏–∑–Ω–µ–Ω–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é\n‚Ä¢ –°–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞\n‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞\n‚Ä¢ –ü–æ–≤—ã—Å–∏—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç\n‚Ä¢ –£–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ "üõí –ö—É–ø–∏—Ç—å –∫—É—Ä—Å" –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏.`,
      { 
        parse_mode: 'Markdown',
        reply_markup: {
          ...mainKeyboard().reply_markup,
          remove_keyboard: true
        }
      }
    );
    
    await ctx.answerCbQuery();
    logWithTime(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é`);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": ${error.message}`);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

bot.action('show_purchases', async (ctx) => {
  try {
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    if (completedOrders[userId] && completedOrders[userId].length > 0) {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const purchaseLines = completedOrders[userId].map((order, index) => {
        const product = products[order.productId];
        const date = new Date(order.completedAt).toLocaleDateString();
        return `${index + 1}. *${product.name}*\n   –î–∞—Ç–∞: ${date}\n   –°—Ç–∞—Ç—É—Å: ‚úÖ –û–ø–ª–∞—á–µ–Ω–æ`;
      });
      
      const message = 'üõç *–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏*:\n\n' + 
                      purchaseLines.join('\n\n') + 
                      '\n\n–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–∞–∫–∏–µ-—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç.';
      
      await ctx.reply(message, { 
        parse_mode: 'Markdown',
        reply_markup: {
          ...mainKeyboard().reply_markup,
          remove_keyboard: true
        }
      });
      
      await ctx.answerCbQuery();
      logWithTime(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–≤–æ–∏ –ø–æ–∫—É–ø–∫–∏`);
    } else {
      await ctx.reply(messageTemplates.noPurchases, {
        reply_markup: {
          ...mainKeyboard().reply_markup,
          remove_keyboard: true
        }
      });
      await ctx.answerCbQuery('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫');
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–∫—É–ø–æ–∫: ${error.message}`);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      reply_markup: {
        ...mainKeyboard().reply_markup,
        remove_keyboard: true
      }
    });
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

bot.action('show_consultations', async (ctx) => {
  try {
    const userId = ctx.from.id;
    
    if (completedOrders[userId]) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏
      const consultations = completedOrders[userId].filter(
        order => order.productId === 'individual' || order.productId === 'package'
      );
      
      if (consultations.length > 0) {
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
        await ctx.replyWithPhoto(
          { source: 'files/logo.jpg' },
          { caption: 'üé¨ –í–∞—à–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏' }
        );
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const consultationLines = consultations.map((order, index) => {
          const product = products[order.productId];
          const date = new Date(order.completedAt).toLocaleDateString();
          const recordingStatus = order.recordingSent 
            ? `\n   –ó–∞–ø–∏—Å—å: ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${new Date(order.recordingSentDate).toLocaleDateString()}`
            : '\n   –ó–∞–ø–∏—Å—å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è';
          
          return `${index + 1}. *${product.name}*\n   –î–∞—Ç–∞: ${date}${recordingStatus}`;
        });
        
        const message = 'üé¨ *–í–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏*:\n\n' + 
                      consultationLines.join('\n\n') + 
                      '\n\n–ó–∞–ø–∏—Å–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è.';
        
        await ctx.reply(message, { 
          parse_mode: 'Markdown',
          reply_markup: {
            ...consultationsKeyboard().reply_markup
          }
        });
        
      } else {
        await ctx.reply(
          '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ "üõí –ö—É–ø–∏—Ç—å –∫—É—Ä—Å", —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ.',
          {
            reply_markup: {
              ...mainKeyboard().reply_markup,
              remove_keyboard: true
            }
          }
        );
      }
    } else {
      await ctx.reply(
        '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ "üõí –ö—É–ø–∏—Ç—å –∫—É—Ä—Å", —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ.',
        {
          reply_markup: {
            ...mainKeyboard().reply_markup,
            remove_keyboard: true
          }
        }
      );
    }
    
    await ctx.answerCbQuery();
    logWithTime(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–≤–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏`);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: ${error.message}`);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      reply_markup: {
        ...mainKeyboard().reply_markup,
        remove_keyboard: true
      }
    });
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

bot.action('refresh_consultations', async (ctx) => {
  try {
    // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
    await ctx.deleteMessage();
    await ctx.answerCbQuery('–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫...');
    
    // –≠–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"
    const fakeContext = {...ctx};
    await bot.action('show_consultations')(fakeContext);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: ${error.message}`);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
bot.on('text', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const text = ctx.message.text;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏ –º—ã –∂–¥–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å
    if (userId.toString() === ADMIN_ID.toString() && 
        global.botData.adminState && 
        global.botData.adminState.action === 'waiting_recording_link') {
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
      global.botData.adminState.recordingLink = text;
      global.botData.adminState.action = 'waiting_recording_notes';
      
      await ctx.reply(
        '‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–º–µ—Å—Ç–µ —Å –∑–∞–ø–∏—Å—å—é (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥).'
      );
      
      return;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –∏ –º—ã –∂–¥–µ–º –∑–∞–º–µ—Ç–∫–∏ –∫ –∑–∞–ø–∏—Å–∏
    if (userId.toString() === ADMIN_ID.toString() && 
        global.botData.adminState && 
        global.botData.adminState.action === 'waiting_recording_notes') {
      
      const { adminState } = global.botData;
      const notes = text.toLowerCase() === '–Ω–µ—Ç' ? '' : text;
      
      const success = await sendConsultationRecording(
        adminState.clientId, 
        adminState.recordingLink,
        notes
      );
      
      if (success) {
        await ctx.reply('‚úÖ –ó–∞–ø–∏—Å—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É!');
      } else {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
      }
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      global.botData.adminState = null;
      
      return;
    }
    
    // –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
    await handleTextInput(ctx);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞: ${error.message}`);
    if (ctx.from.id.toString() === ADMIN_ID.toString()) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } else {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
bot.hears(/^\/confirm_(\d+)$/, async (ctx) => {
  try {
    if (ctx.from.id.toString() !== ADMIN_ID.toString()) {
      return;
    }
    
    const clientId = ctx.match[1];
    await confirmPayment(clientId);
    
    logWithTime(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${clientId}`);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: ${error.message}`);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

bot.action(/confirm_payment_(\d+)/, async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (ctx.from.id.toString() !== ADMIN_ID.toString()) {
      return await ctx.answerCbQuery('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
    }
    
    const clientId = ctx.match[1];
    await confirmPayment(clientId);
    await ctx.answerCbQuery('‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É.');
    
    logWithTime(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${clientId}`);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: ${error.message}`);
    await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${error.message.substring(0, 50)}`);
  }
});

bot.action(/prepare_recording_(\d+)/, async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (ctx.from.id.toString() !== ADMIN_ID.toString()) {
      return await ctx.answerCbQuery('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
    }
    
    const clientId = ctx.match[1];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
    global.botData.adminState = {
      action: 'waiting_recording_link',
      clientId
    };
    
    await ctx.reply(
      `üé• –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—É (ID: ${clientId}).\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.`
    );
    
    await ctx.answerCbQuery('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø–∏—Å–∏');
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏: ${error.message}`);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

bot.action(/cancel_order_(\d+)/, async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (ctx.from.id.toString() !== ADMIN_ID.toString()) {
      return await ctx.answerCbQuery('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
    }
    
    const clientId = ctx.match[1];
    
    if (pendingOrders[clientId]) {
      const product = products[pendingOrders[clientId].productId];
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
      await bot.telegram.sendMessage(
        clientId,
        `‚ùå –í–∞—à –∑–∞–∫–∞–∑ "${product.name}" –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ê–Ω–∞—Å—Ç–∞—Å–∏–µ–π.`,
        {
          reply_markup: {
            ...mainKeyboard().reply_markup,
            remove_keyboard: true
          }
        }
      );
      
      // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
      delete pendingOrders[clientId];
      
      await ctx.reply(`‚úÖ –ó–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞ ${clientId} –æ—Ç–º–µ–Ω–µ–Ω.`);
      logWithTime(`–ó–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${clientId} –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`);
    } else {
      await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
    
    await ctx.answerCbQuery();
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: ${error.message}`);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

bot.action(/message_client_(\d+)/, async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (ctx.from.id.toString() !== ADMIN_ID.toString()) {
      return await ctx.answerCbQuery('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
    }
    
    const clientId = ctx.match[1];
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    await ctx.reply(
      `‚úèÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º ID: ${clientId}`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º', url: `tg://user?id=${clientId}` }]
          ]
        }
      }
    );
    
    await ctx.answerCbQuery('–°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç');
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: ${error.message}`);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
bot.on('message', async (ctx) => {
  try {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (ctx.message.text && (
      ctx.message.text.startsWith('/') || 
      (pendingOrders[ctx.from.id] && 
       (pendingOrders[ctx.from.id].status === 'waiting_email' || 
        pendingOrders[ctx.from.id].status === 'waiting_phone')
      )
    )) {
      return;
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await ctx.reply(
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.',
      {
        reply_markup: {
          ...mainKeyboard().reply_markup,
          remove_keyboard: true
        }
      }
    );
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ Express

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  const uptime = Math.floor((new Date() - startTime) / 1000);
  const uptimeFormatted = formatUptime(uptime);
  
  res.send(`
    <html>
      <head>
        <title>Breathing Practice Bot</title>
        <style>
          body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; }
          .status { padding: 10px; border-radius: 5px; margin-bottom: 10px; }
          .online { background-color: #d4edda; color: #155724; }
          h1 { color: #5682a3; }
          .info { background-color: #f8f9fa; padding: 15px; border-radius: 5px; }
        </style>
      </head>
      <body>
        <h1>Breathing Practice Bot</h1>
        <div class="status online">
          <strong>Status:</strong> Bot is running in webhook mode!
        </div>
        <div class="info">
          <p><strong>Uptime:</strong> ${uptimeFormatted}</p>
          <p><strong>Started:</strong> ${startTime.toLocaleString()}</p>
          <p><strong>Last ping:</strong> ${new Date().toLocaleString()}</p>
          <p><strong>Port:</strong> ${PORT}</p>
        </div>
      </body>
    </html>
  `);
  logWithTime(`–ó–∞–ø—Ä–æ—Å –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (uptime: ${uptimeFormatted})`);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è (–≤–∞–∂–Ω–æ –¥–ª—è Render)
app.get('/ping', (req, res) => {
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å HTTP –∫–æ–¥–æ–º 200
    res.status(200).set('Content-Type', 'text/plain').send('pong');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    global.botData.lastPingTime = new Date();
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ping-–∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.status(200).send('error, but still alive');
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
app.get('/status', (req, res) => {
  try {
    const status = {
      status: 'ok',
      uptime: Math.floor((new Date() - startTime) / 1000),
      startTime: startTime.toISOString(),
      currentTime: new Date().toISOString(),
      webhookMode: true,
      port: PORT,
      lastPingTime: global.botData.lastPingTime.toISOString(),
      memory: process.memoryUsage()
    };
    
    res.json(status);
    logWithTime('–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞');
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ status-–∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    res.status(200).json({ status: 'error', message: error.message });
  }
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
async function startApp() {
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä
    const server = app.listen(PORT, '0.0.0.0', () => {
      console.log(`Server running on port ${PORT}`);
      logWithTime(`Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT} –∏ –∞–¥—Ä–µ—Å–µ 0.0.0.0`);
    });
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    let webhookSetup = false;
    let attempts = 0;
    const maxAttempts = 5;
    
    while (!webhookSetup && attempts < maxAttempts) {
      attempts++;
      try {
        logWithTime(`–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞ ${attempts}/${maxAttempts}`);
        webhookSetup = await setupWebhook();
        
        if (webhookSetup) {
          logWithTime(`–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å ${attempts} –ø–æ–ø—ã—Ç–∫–∏`);
        } else {
          logWithTime(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–±—Ö—É–∫ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})`);
          // –ï—Å–ª–∏ –Ω–µ –≤–µ–±—Ö—É–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∂–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
          await new Promise(resolve => setTimeout(resolve, 5000));
        }
      } catch (error) {
        logWithTime(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ–±—Ö—É–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}): ${error.message}`);
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }
    
    if (webhookSetup) {
      logWithTime('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
      if (APP_URL) {
        setupPing(APP_URL, 5); // –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        logWithTime(`–ù–∞—Å—Ç—Ä–æ–µ–Ω —Å–∞–º–æ–ø–∏–Ω–≥ –¥–ª—è ${APP_URL}`);
      }
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
      setupScheduler(bot, ADMIN_ID);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∑–∞–ø—É—Å–∫–µ
      if (ADMIN_ID) {
        try {
          const botInfo = await bot.telegram.getMe();
          bot.telegram.sendMessage(
            ADMIN_ID,
            `ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞!\n\n–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}\n–ò–º—è –±–æ—Ç–∞: @${botInfo.username}\nID –±–æ—Ç–∞: ${botInfo.id}\nPORT: ${PORT}`
          ).catch(e => console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', e.message));
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error.message);
        }
      }
    } else {
      logWithTime('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–±—Ö—É–∫ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–±—Ö—É–∫ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    logWithTime(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${error.message}`);
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
process.once('SIGINT', () => {
  logWithTime('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.telegram.deleteWebhook().then(() => {
    logWithTime('–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω');
  });
  logWithTime('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ SIGINT');
});

process.once('SIGTERM', () => {
  logWithTime('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.telegram.deleteWebhook().then(() => {
    logWithTime('–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω');
  });
  logWithTime('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ SIGTERM');
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
startApp();
